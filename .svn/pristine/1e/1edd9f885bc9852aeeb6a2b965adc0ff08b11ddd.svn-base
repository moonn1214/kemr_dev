/**
 * jkmoon
 * 원무-진료 대기 컴포넌트
 */
import React, { useState, useEffect } from 'react';
import { Card, CardText, Badge, DropdownItem, DropdownMenu } from 'reactstrap';
import { useAppDispatch, useAppSelector } from 'app/config/store';
// import { reset } from 'app/entities/kemr-medical-treatment/kemr-medical-treatment.reducer';
import { getEntities as getKemrMedicalTreatments } from 'app/entities/kemr-medical-treatment/kemr-medical-treatment.reducer';
import DiagnosisWaitingDeleteModal from './diagnosis-waiting-delete-modal';
import { TextFormat } from 'react-jhipster';
import { APP_KR_DATETIME_FORMAT } from 'app/config/constants';
import WaitingPaginationComponent from './waiting-pagination';
import { IoMale, IoFemale, IoEllipsisHorizontalSharp } from 'react-icons/io5';

export interface IDiagnosisWaitingComponentProps {
  getOnlyAge: (socialSecurityNo: any) => string;
}

export const DiagnosisWaitingComponent = (props: IDiagnosisWaitingComponentProps) => {
  const dispatch = useAppDispatch();

  const loading = useAppSelector(state => state.kemrMedicalTreatment.loading);
  const kemrMedicalTreatments = useAppSelector(state => state.kemrMedicalTreatment.entities);

  // 진료 대기 삭제 모달 상태 및 파라미터 상태
  const [showReceptDeleteWaitingModal, setReceptDeleteWaitingShowModal] = useState(false);
  const [kemrDeleteMedicalTreatmentInfo, setKemrDeleteMedicalTreatmentInfo] = useState({ medicalTreatmentId: '', patientName: '' });
 
  // 진료 대기 삭제 모달을 닫는 메소드
  const handleClose = () => {
    setReceptDeleteWaitingShowModal(false);
  };

  // 진료 대기 삭제 모달을 열고 파라미터를 설정하는 메소드
  const deleteRecept = (deleteMedicalTreatmentId, deletePatientName) => {
    setReceptDeleteWaitingShowModal(true);
    setKemrDeleteMedicalTreatmentInfo({
      ...kemrDeleteMedicalTreatmentInfo,
      medicalTreatmentId: deleteMedicalTreatmentId,
      patientName: deletePatientName
    });
  };

  useEffect(() => {
    // dispatch(reset());
    dispatch(getKemrMedicalTreatments({}));
  }, []);

  const waitingItem = 
    kemrMedicalTreatments && kemrMedicalTreatments.length > 0 ? (
      kemrMedicalTreatments
      .filter(
        kemrMedicalTreatment => kemrMedicalTreatment.kemrDiagnosis === null && kemrMedicalTreatment.kemrTreatment === null
      )
      .map((kemrMedicalTreatment, i) => (
        <Card body key={`entity-${i}`}>
          <CardText>
            <Badge color='light' pill >
              {kemrMedicalTreatment.kemrPatient.kemrPatientSex === 'M' ? 
                <IoMale size="15px" style={{ color: "blue" }} /> : <IoFemale size="15px" style={{ color: "red" }} />}
            </Badge>
            &nbsp;
            {kemrMedicalTreatment.kemrPatient ? kemrMedicalTreatment.kemrPatient.kemrPatientName : ''}
            &nbsp;
            ({kemrMedicalTreatment.kemrPatient ? props.getOnlyAge(kemrMedicalTreatment.kemrPatient.kemrPatientSocialSecurityNo) : ''}세)
            &nbsp;
            &nbsp;
            <IoEllipsisHorizontalSharp 
              title="접수 취소"
              style={{ cursor: "pointer", float: "right" }} 
              onClick={() => deleteRecept(kemrMedicalTreatment.id, kemrMedicalTreatment.kemrPatient.kemrPatientName)} 
            />
            <br />
            {kemrMedicalTreatment.kemrDoctor ? kemrMedicalTreatment.kemrDoctor.kemrDoctorName : ''}
            <br />
            {kemrMedicalTreatment.kemrMedicalTreatmentDate ? (
              <TextFormat value={kemrMedicalTreatment.kemrMedicalTreatmentDate} type="date" format={APP_KR_DATETIME_FORMAT} />
            ) : null}
          </CardText>
        </Card>
      ))
    ) : (
      !loading && <div className="alert alert-warning">No Kemr Prescriptions found</div>
    );

  return (
    <div>
      {/* 대기 항목 및 페이지네이션 컴포넌트 호출 */}
      <WaitingPaginationComponent 
        itemList={waitingItem}
      />
      {/* 진료 대기 삭제 모달 컴포넌트 호출 */}
      <DiagnosisWaitingDeleteModal
        showModal={showReceptDeleteWaitingModal}
        kemrPatientName={kemrDeleteMedicalTreatmentInfo.patientName}
        kemrMedicalTreatmentId={kemrDeleteMedicalTreatmentInfo.medicalTreatmentId}
        handleClose={handleClose}
      />
    </div>
  );
};

export default DiagnosisWaitingComponent;
